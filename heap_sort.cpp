#include <stdio.h>

int number = 9;
int heap[9] = { 7, 6, 5, 8, 3, 5, 9, 1, 6 };

int main(void) {
	// 힙을 구성
	for(int i=1; i<number/2; ++i) { // i=1부터인 이유는 부모노드 계산 때문에. 
		int c = i;
		do {
			int root = (c - 1) / 2; // root node 계산. 
			if(heap[root] < heap[c]) { // 자식노드가 더 크면 바꿈. 최대 힙 화. 
				int temp = heap[root];
				heap[root] = heap[c];
				heap[c] = temp;
			}
			c = root;
		} while(c != 0);
	}
	// 크기를 줄여가며 반복적으로 힙을 구성
	for(int i=number - 1; i>=0; --i) {
		// 가장 큰 값을 뒤로 보낸다. 
		int temp = heap[0];
		heap[0] = heap[i];
		heap[i] = temp;
		int root = 0;
		int c = 1;
		do {
			c = 2 * root + 1;
			// 자식 중에 더 큰 값을 찾기
			if(c < i-1 && heap[c] < heap[c+1]) { // (범위가 하나씩 줄어드니까)
				++c;
			}
			// 루트보다 자식이 크다면 교환
			if(c < i && heap[root] < heap[c]) {
				temp = heap[root];
				heap[root] = heap[c];
				heap[c] = temp;
			}
			root = c;
		} while(c < i);
	}
	// 결과 출력
	for(int i=0; i<number; ++i) {
		printf("%d ", heap[i]);
	}
}
